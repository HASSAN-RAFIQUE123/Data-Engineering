Minimum cost and month of november:

TotalProductCost_November_2017 = 
CALCULATE(
    MIN('Sales'[Cost]),
    FILTER(
        'Sales',
        'Sales'[Date] >= DATE(2017, 11, 1)
        && 'Sales'[Date] <= DATE(2017, 11, 30)
    )
)
/////////////////////////////////////////////////////////////////////////

Average salary of check republic employee

avgofsalary = CALCULATE(AVERAGE(Employees[Salary (in euros)]),

FILTER
(Employees,
Employees[Country ID] =1 || OR
Employees[Country ID] =2 ||
Employees[Country ID] =3
))
///////////////////////////////////////////////////////////////////////////////
evaluate(
         'Internet Sales'
)
 order by [ProductKey]
//////////////////////////////////////////////////////////////////////////////
count Number of Days
COUTDAYS(CALENDAR(DATE(2020,4,1), DATE(2020,6,5)))

////////////////////////////////////////////////////////////////////////////
avgofsalary = 
CALCULATE(
    AVERAGE(Employees[Salary (in euros)]),
    FILTER(
        Employees,
        Employees[Country ID] IN {1, 2, 3}
    )
)
/////////////////////////////////////////////////////////////////////////////
Total Revenue of john chee


Total_Revenu = CALCULATE(SUM(Sales[Revenue]),
FILTER(Employees,
Employees[ID]=13))

/////////////////////////////////////////////////////////////////////////////

what are total travel expence of Tomasz maly in first quater (jan-march)2017.

expence = 
CALCULATE(
    SUM('Travel expenses'[Value]),
    FILTER(
        'Travel expenses',
        'Travel expenses'[Employee] = 9 &&
        'Travel expenses'[Attribute] IN {"January","March","February"}
    )
)

///////////////////////////////////////////////////////////////////////////////
DAX DATESBETWEEN function
The return table contains a column of dates between the start date and the end date.
Syntax:
DATESBETWEEN(<Dates>, <StartDate>, <EndState>)
Example:
CALCULATE(SUM(Sales([Sales Amount]), DATESBETWEEN(Sales[Date], Date(2020,1,1), Date(2020,3,31)))
/////////////////////////////////////////////////////////////////////////////////
import pymongo

client = pymongo.MongoClient("mongodb://localhost:27017/")
database = client["your_database_name"]  # Replace 'your_database_name' with your actual DB name

orders_collection = database["Orders"]
products_collection = database["Products"]

pipeline = [
    {
        "$lookup": {
            "from": "Products",
            "localField": "ProductID",  # Field in Orders collection
            "foreignField": "_id",  # Field in Products collection
            "as": "product_info"
        }
    },
    {
        "$unwind": "$product_info"
    },
    {
        "$match": {
            "product_info": {"$exists": True}  # Filters out non-matching documents
        }
    },
    {
        "$project": {
            "_id": 0,
            "OrderID": "$_id",
            "Product": "$product_info.Name",
            "Quantity": "$Quantity"
            # Add more fields as needed
        }
    }
]

result = list(orders_collection.aggregate(pipeline))

for item in result:
    print(item)
